@using TaskManager.Shared

@if (!Visibilidad) // Compruebo si el contenedor debe ser visible según el parámetro, y establezco los estilos a aplicar
{
    _estiloVisibilidad = "visibility:hidden";
}
else
{
    _estiloVisibilidad = "visibility:visible";
}

<div class="container col-5 p-3 ml-3 d-inline-block" style="@_estiloVisibilidad"> <!-- Le aplico el estilo mediante la variable privada -->
    <h3>@Header</h3>
        <ul class="list-group">
            @foreach (var task in TaskList) // Recorro la lista pasada como parámetro
            {
                // Muestro cada tarea, con una función indicando sus acciones cuando se clicke
                <li class="list-group-item" @onclick="()=> OnClickFunction.InvokeAsync(task.Id)">@task.Name - @task.Description</li>

                // Muestro el primer botón, que se creará siempre
                <button type="button" class="btn btn-info"><a style="text-decoration:none; color:inherit;" href="/edit/@task.Id">Editar</a></button>
                @if (@MasDeUnBoton) // Si el parámetro booleano está a true
               {
                // Añado el segundo botón
                <button type="button" class="btn btn-info"><a style="text-decoration:none; color:inherit;" href="/edit/@task.Id/@true">Añadir Subtarea</a></button>                           
               }
            }
        </ul>
</div>



@*<div class="container bootstrap snippets bootdeys">
    <div class="col-md-4 col-sm-6 content-card" style="@_estiloVisibilidad">
        <div class="card-big-shadow">
            <div class="card card-just-text" data-background="color" data-color="orange" data-radius="none">
                <div class="content">
                     <!-- Le aplico el estilo mediante la variable privada --> 
                    <h3>@Header</h3>
                    <div>
                        <ul>
                            @foreach (var task in TaskList) // Recorro la lista pasada como parámetro
                            {
                            // Muestro cada tarea, con una función indicando sus acciones cuando se clicke
                                <li @onclick="()=> OnClickFunction.InvokeAsync(task.Id)">@task.Name - @task.Description</li>

                                // Muestro el primer botón, que se creará siempre
                                <button type="button"><a href="/edit/@task.Id">Editar</a></button>
                                @if (@MasDeUnBoton) // Si el parámetro booleano está a true
                                {
                                    // Añado el segundo botón
                                    <button type="button" class="btn btn-primary btn-lg btn3d"><a href="/edit/@task.Id/@true">Añadir Subtarea</a></button>
                                }
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
*@


@code {
    [Parameter] public String Header { set; get; } // Establezco un parámetro para el título del componente
    [Parameter] public List<Todo> TaskList { set; get; } = new(); // Establezco un parámetro para la lista a mostrar
    [Parameter] public EventCallback<Guid> OnClickFunction { get; set; } // Para poder pasarle la función a realizar en el OnClick
    [Parameter] public bool MasDeUnBoton { get; set; } // Booleana indicando si debemos añadir los 2 botones
    [Parameter] public bool Visibilidad { get; set; } // Booleana indicando si el contenedor va a ser visible

    private string _estiloVisibilidad = ""; // Cadena para insertar los estilos al container
}